generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(cuid())
  username String @unique
}

model Student {
  id          String       @id @default(cuid())
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         Sex
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  classId     String
  parentId    String
  gradeId     String
  birthdate   DateTime
  attendances Attendance[]
  results     Result[]
  classes     Class        @relation(fields: [classId], references: [id])
  grades      Grade        @relation(fields: [gradeId], references: [id])
  parents     Parent       @relation(fields: [parentId], references: [id])
}

model Teacher {
  id        String    @id @default(cuid())
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  birthdate DateTime
  bloodType String
  sex       Sex
  classes   Class[]
  lessons   Lesson[]
  subjects  Subject[] @relation("SubjectToTeacher")
}

model Parent {
  id        String    @id @default(cuid())
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  img       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  students  Student[]
}

model Grade {
  id        String    @id @default(cuid())
  level     Int       @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  classes   Class[]
  students  Student[]
}

model Class {
  id            String         @id @default(cuid())
  name          String         @unique
  capacity      Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  supervisorId  String
  gradeId       String
  announcements Announcement[]
  grade         Grade          @relation(fields: [gradeId], references: [id])
  supervisor    Teacher        @relation(fields: [supervisorId], references: [id])
  events        Event[]
  lessons       Lesson[]
  students      Student[]
}

model Subject {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  lessons   Lesson[]
  teachers  Teacher[] @relation("SubjectToTeacher")
}

model Lesson {
  id          String       @id @default(cuid())
  name        String
  day         Day
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  subjectId   String
  classId     String
  teacherId   String
  assignments Assignment[]
  attendances Attendance[]
  exams       Exam[]
  class       Class        @relation(fields: [classId], references: [id])
  subject     Subject      @relation(fields: [subjectId], references: [id])
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
}

model Exam {
  id        String    @id @default(cuid())
  title     String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  lessonId  String
  lesson    Lesson    @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Assignment {
  id        String    @id @default(cuid())
  title     String
  startDate DateTime
  dueDate   DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  lessonId  String
  lesson    Lesson    @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Result {
  id           String      @id @default(cuid())
  score        Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?
  examId       String?
  assignmentId String?
  studentId    String
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  exam         Exam?       @relation(fields: [examId], references: [id])
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id        String    @id @default(cuid())
  date      DateTime
  present   Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  studentId String
  lessonId  String
  lesson    Lesson    @relation(fields: [lessonId], references: [id])
  student   Student   @relation(fields: [studentId], references: [id])
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  classId     String?
  class       Class?    @relation(fields: [classId], references: [id])
}

model Announcement {
  id          String    @id @default(cuid())
  title       String
  description String
  date        DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  classId     String?
  class       Class?    @relation(fields: [classId], references: [id])
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum Sex {
  MALE
  FEMALE
  OTHER
}
